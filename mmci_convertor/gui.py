import json
import psycopg2
from flask import Flask, redirect, url_for,  render_template, request, session, send_file, send_from_directory
import os
from load_data_fhir import provide_server_connection, read_xml_and_create_resources
from load_data_fhir_extra import create_graphs
from load_data_ohdsi import load_data
import quality_checks_fhir
import quality_checks_ohdsi as qc_o
import atexit
import pandas as pd
from fhirclient import client
import io
import zipfile
import threading
from input_validation import check_well_formed_xml, validate_elements


app = Flask(__name__)
app.secret_key = "supersecretkey"

# folder for uploaded files - this part was generated by ChatGPT
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# home page
@app.route("/")
def home():
    """

    Returns: start template

    """
    return render_template("start.html")

# provide information
# fhir
@app.route("/why_fhir")
def why_fhir():
    """

    Returns: why_fhir template

    """
    return render_template("why_fhir.html")

# omop
@app.route("/why_omop")
def why_omop():
    """

    Returns: why_omop template

    """
    return render_template("why_omop.html")

@app.route("/choose_your_path")
def choose_your_path():
    """

    Returns: choose_your_path template

    """
    return render_template("choose_your_path.html")

# fhir workflow
@app.route("/provide_data")
def provide_data():
    """

    Returns: provide_data template

    """
    return render_template("provide_data.html")

@app.route("/check_data_format")
def check_data_format():
    """

    Returns: check_data_format template

    """
    return render_template("check_data_format.html")

@app.route("/extra_fhir")
def extra_fhir():
    """

    Returns: extra_fhir template

    """
    return render_template("extra_fhir.html")

@app.route("/provide_server_fhir")
def provide_server_fhir():
    """

    Returns: provide_server_fhir template

    """
    return render_template("provide_server_fhir.html")

@app.route("/connection_fhir")
def connection_fhir():
    """

    Returns: connection_fhir template

    """
    return render_template("connection_fhir.html")

@app.route("/run_qc")
def run_qc():
    """

    Returns: run_qc template

    """
    return render_template("run_qc.html")

@app.route("/dashboard_reports_fhir")
def dashboard_reports_fhir():
    """

    Returns: dashboard_reports_fhir template

    """
    return render_template("dashboard_reports_fhir.html")

@app.route("/dashboard_graphs_fhir")
def dashboard_graphs_fhir():
    """

    Returns: dashboard_graphs_fhir template

    """
    return render_template("dashboard_graphs_fhir.html")

@app.route("/dashboard_graphs_fhir_extra")
def dashboard_graphs_fhir_extra():
    """

    Returns: dashboard_graphs_fhir_extra template

    """
    return render_template("dashboard_graphs_fhir_extra.html")

@app.route("/dashboard_failures_fhir")
def dashboard_failures_fhir():
    """

    Returns: dashboard_failures_fhir template

    """
    return render_template("dashboard_failures_fhir.html")

@app.route("/dashboard_failures_fhir_extra")
def dashboard_failures_fhir_extra():
    """

    Returns: dashboard_failures_fhir_extra template

    """
    return render_template("dashboard_failures_fhir_extra.html")

# omop workflow
@app.route("/provide_database_omop")
def provide_database_omop():
    """

    Returns: provide_database_omop template

    """
    return render_template("provide_database_omop.html")

@app.route("/connection_omop")
def connection_omop():
    """

    Returns: connection_omop template

    """
    return render_template("connection_omop.html")

@app.route("/dashboard_reports_omop")
def dashboard_reports_omop():
    """

    Returns: dashboard_reports_omop template

    """
    return render_template("dashboard_reports_omop.html")

@app.route("/dashboard_graphs_omop")
def dashboard_graphs_omop():
    """

    Returns: dashboard_graphs_omop template

    """
    return render_template("dashboard_graphs_omop.html")

@app.route("/dashboard_failures_omop")
def dashboard_failures_omop():
    """

    Returns: dashboard_failures_omop template

    """
    return render_template("dashboard_failures_omop.html")

# actions in informative part
@app.route("/FROM_start_TO_provide_data", methods=["POST"])
def from_start_to_provide_data():
    """

    Returns: Redirection to provide_data template

    """
    return redirect("provide_data")

# uploaded file handling - this function was generated by ChatGPT
@app.route('/FROM_provide_data_TO_check_data_format', methods=['POST'])
def upload_file():
    """

    Returns: Safe file with input data and redirect to check_data_format template

    """
    if 'file' not in request.files:
        return redirect(request.url)

    file = request.files['file']

    if file.filename == '':
        return redirect(request.url)

    if file:
        session["file_name"] = file.filename
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))
        content = "Correct input file!"
        well_formed = check_well_formed_xml(file.filename)
        if check_well_formed_xml(file.filename) is not None:
            content = well_formed
        else:
            validation = validate_elements(file.filename)
            if validation is not None:
                content = validation
        return render_template("check_data_format.html", content=content)


@app.route("/FROM_check_data_format_TO_why_fhir", methods=["POST"])
def from_check_data_format_to_why_fhir():
    """

    Returns: Based on chosen action redirects on template

    """
    try:
        action = request.form.get('action')

        if action == 'back':
            return redirect(url_for('provide_data'))
        elif action == 'go':
            return redirect(url_for("why_fhir"))

    except Exception as e:
        print(f"Error: {e}")
        return "An error occurred", 500
    return redirect(url_for("why_fhir"))

@app.route("/FROM_why_fhir_TO_why_omop", methods=["POST"])
def from_why_fhir_to_why_omop():
    """

    Returns: Redirects to why_omop template

    """
    return redirect("why_omop")

@app.route("/FROM_why_omop_TO_qc_documentation", methods=["POST"])
def from_why_omop_to_qc_documentation():
    """

    Returns: Redirects to qc_documentation template

    """
    return redirect("qc_documentation")

@app.route("/FROM_qc_documentation_TO_choose_your_path", methods=["POST"])
def from_qc_documentation_to_choose_your_path():
    """

    Returns: Redirects to choose_your_path template

    """
    return redirect("choose_your_path")

@app.route("/choose_your_path_form", methods=["POST"])
def choose_your_path_form():
    """

    Returns: Based on chosen action redirects on template and set settings in session

    """
    try:
        session["fhir_extra"] = "no"
        action = request.form.get('action')
        if action == 'fhir':
            session['standard'] = "fhir"
            return redirect(url_for('extra_fhir'))
        elif action == 'omop':
            session['standard'] = "omop"
            return redirect(url_for("provide_database_omop"))
        elif action == 'both':
            session['standard'] = "both"
            return redirect(url_for("extra_fhir"))


    except Exception as e:
        print(f"Error: {e}")
        return "An error occurred", 500
    return redirect(url_for("choose_your_path"))

@app.route("/fhir_extra", methods=["POST"])
def fhir_extra():
    """

    Returns: Based on chosen action redirects on template and set settings in session

    """
    try:
        action = request.form.get('action')
        if action == 'no':
            session['fhir_extra'] = "no"
        elif action == 'yes':
            session['fhir_extra'] = "yes"
        print(session['fhir_extra'])
        return redirect(url_for("provide_server_fhir"))


    except Exception as e:
        print(f"Error: {e}")
        return "An error occurred", 500


# actions in fhir

# server connection handling
@app.route('/provide_server_fhir_form', methods=['POST'])
def provide_server_fhir_form():
    """

    Returns: Test FHIR server connection and provide result

    """
    url = request.form.get('url')
    session['url'] = request.form.get('url')
    check = check_fhir_connection(url)
    if check:
        content = "Server connected!"
    else:
        content = "Connection failed."
    return render_template("connection_fhir.html", content=content)

@app.route("/connection_fhir_form", methods=["POST"])
def connection_fhir_form():
    """

    Returns: Based on chosen action redirects on template

    """
    try:
        action = request.form.get('action')
        if action == 'back':
            return redirect(url_for('provide_server_fhir'))
        elif action == 'next':
            standard = session.get("standard")
            if standard == "fhir":
                return redirect(url_for("run_qc"))
            else:
                return redirect(url_for("provide_database_omop"))

    except Exception as e:
        print(f"Error: {e}")
        return "An error occurred", 500
    return redirect(url_for("connection_fhir"))

# actions in omop
@app.route("/FROM_provide_database_omop_TO_connection_omop", methods=["POST"])
def from_provide_database_omop_to_connection_omop():
    """

    Returns: Test OMOP database connection and provide result

    """
    try:
        action = request.form.get('action')

        host = request.form.get("host")
        port = request.form.get("port")
        user = request.form.get("user")
        password = request.form.get("password")
        database = request.form.get("database")
        schema = request.form.get("schema")
        ohdsi = {
        'host': host,
        'port': port,
        'user': user,
        'password': password,
        'database': database,
        "schema" : schema
        }
        session["ohdsi"] = ohdsi

        check = check_database_connection(ohdsi)
        if check:
            content = "Server connected!"
        else:
            content = "Connection failed."

        if action == "back":
            return render_template("provide_database_omop.html")
        elif action == "next":
            return render_template("connection_omop.html", content=content)

    except Exception as e:
        print(f"Error: {e}")
        return "An error occurred", 500
    return redirect(url_for("provide_database_omop"))

@app.route("/connection_omop_form", methods=["POST"])
def connection_omop_form():
    """

    Returns: Based on chosen action redirects on template

    """
    try:
        action = request.form.get('action')

        if action == 'back':
            return redirect(url_for('connection_omop'))
        elif action == 'continue':
            return redirect(url_for('run_qc'))

    except Exception as e:
        print(f"Error: {e}")
        return "An error occurred", 500
    return redirect(url_for("connection_omop"))

# run quality checks
@app.route("/run_qc_form", methods=["POST"])
def run_qc_form():
    """

    Returns: Start loading data and quality checks.

    """
    try:
        standard = session.get("standard")
        input_file = session.get("file_name")
        fhir_extra = session.get("fhir_extra")
        url = session.get("url")
        print(standard)
        if standard == "fhir":
            fhir_process = threading.Thread(target=fire, name="FHIR", args=[url, input_file, fhir_extra])
            fhir_process.start()
            return render_template('dashboard_graphs_fhir.html', standard=standard, extra=fhir_extra)
        elif standard == "omop":
            ohdsi = session.get("ohdsi")
            ohdsi_process = threading.Thread(target=omop_workflow, name="OMOP", args=[ohdsi, input_file])
            ohdsi_process.start()
            return render_template('dashboard_graphs_omop.html', standard=standard,  extra=fhir_extra)
        elif standard == "both":
            fhir_process = threading.Thread(target=fire, name="FHIR", args=[url, input_file, fhir_extra])
            fhir_process.start()
            ohdsi = session.get("ohdsi")
            ohdsi_process = threading.Thread(target=omop_workflow, name="OMOP", args=[ohdsi, input_file])
            ohdsi_process.start()
            return render_template('dashboard_graphs_fhir.html', standard=standard, extra=fhir_extra)
    except Exception as e:
        print(f"Error: {e}")
        return "An error occurred", 500

@app.route('/go_to_dashboard_fhir', methods=['POST'])
def go_to_dashboard_fhir():
    """

    Returns: Save graphs from FHIR data quality checks.

    """
    graphs = []

    # Load all JSON files from the directory
    for file_name in os.listdir('graphs/fhir'):
        if file_name.endswith('.json'):
            with open(os.path.join('graphs/fhir', file_name)) as f:
                graphs.append(json.load(f))

    standard = session.get("standard")
    extra = session.get("fhir_extra")

    # Pass the graphs to the template
    return render_template('dashboard_graphs_fhir.html', graphs=graphs, standard=standard, extra=extra)

@app.route('/go_to_dashboard_fhir_extra', methods=['POST'])
def go_to_dashboard_fhir_extra():
    """

    Returns: Save graphs from extra FHIR data quality checks.

    """
    graphs = []

    # Load all JSON files from the directory
    for file_name in os.listdir('graphs/fhir/extra'):
        if file_name.endswith('.json'):
            with open(os.path.join('graphs/fhir/extra', file_name)) as f:
                graphs.append(json.load(f))

    standard = session.get("standard")
    extra = session.get("fhir_extra")

    # Pass the graphs to the template
    return render_template('dashboard_graphs_fhir_extra.html',
                           graphs=graphs, standard=standard, extra=extra)


@app.route('/go_to_dashboard_omop', methods=['POST'])
def go_to_dashboard_omop():
    """

    Returns: Save graphs from OMOP data quality checks.

    """
    graphs = []

    # Load all JSON files from the directory
    for file_name in os.listdir('graphs/omop'):
        if file_name.endswith('.json'):
            with open(os.path.join('graphs/omop', file_name)) as f:
                graphs.append(json.load(f))

    standard = session.get("standard")
    fhir_extra = session.get("fhir_extra")

    # Pass the graphs to the template
    return render_template('dashboard_graphs_omop.html', graphs=graphs, standard=standard,  extra=fhir_extra)

@app.route("/view_graphs_fhir", methods=["POST"])
def view_graphs_fhir():
    """

    Returns: Load graphs from FHIR data quality checks.

    """
    graphs = []

    # Load all JSON files from the directory
    for file_name in os.listdir('graphs/fhir'):
        if file_name.endswith('.json'):
            with open(os.path.join('graphs/fhir', file_name)) as f:
                graphs.append(json.load(f))

    standard = session.get("standard")
    extra = session.get("fhir_extra")

    # Pass the graphs to the template
    return render_template('dashboard_graphs_fhir.html',
                           graphs=graphs, standard=standard, extra=extra)

@app.route("/view_failures_fhir", methods=["POST"])
def view_failures_fhir():
    """

    Returns: Load tables with failures from FHIR data quality checks.

    """
    data_path = './reports/fhir'  # Directory containing CSV files
    csv_files = [f for f in os.listdir(data_path) if f.endswith('.csv')]

    tables = []
    for file in csv_files:
        file_path = os.path.join(data_path, file)
        df = pd.read_csv(file_path)  # Read CSV file
        table_html = df.to_html(classes='table table-striped', index=False)  # Convert DataFrame to HTML
        tables.append({
            'filename': file,
            'table': table_html
        })

    return render_template("dashboard_failures_fhir.html", tables=tables, standard=session.get("standard"))

@app.route("/view_failures_fhir_extra", methods=["POST"])
def view_failures_fhir_extra():
    """

    Returns: Load tables with failures from extra FHIR data quality checks.

    """
    data_path = './reports/fhir/extra'  # Directory containing CSV files
    csv_files = [f for f in os.listdir(data_path) if f.endswith('.csv')]

    tables = []
    for file in csv_files:
        file_path = os.path.join(data_path, file)
        df = pd.read_csv(file_path)  # Read CSV file
        table_html = df.to_html(classes='table table-striped', index=False)  # Convert DataFrame to HTML
        tables.append({
            'filename': file,
            'table': table_html
        })

    return render_template("dashboard_failures_fhir_extra.html", tables=tables, standard=session.get("standard"))


@app.route("/view_graphs_omop", methods=["POST"])
def view_graphs_omop():
    """

    Returns: Load tables with failures from OMOP data quality checks.

    """
    graphs = []

    # Load all JSON files from the directory
    for file_name in os.listdir('graphs/omop'):
        if file_name.endswith('.json'):
            with open(os.path.join('graphs/omop', file_name)) as f:
                graphs.append(json.load(f))

    standard = session.get("standard")
    fhir_extra = session.get("fhir_extra")

    # Pass the graphs to the template
    return render_template('dashboard_graphs_omop.html', graphs=graphs, standard=standard,  extra=fhir_extra)

@app.route("/view_failures_omop", methods=["POST"])
def view_failures_omop():
    """

    Returns: Load tables with failures from OMOP data quality checks.

    """
    data_path = './reports/omop'  # Directory containing CSV files
    csv_files = [f for f in os.listdir(data_path) if f.endswith('.csv')]

    tables = []
    for file in csv_files:
        file_path = os.path.join(data_path, file)
        df = pd.read_csv(file_path)  # Read CSV file
        table_html = df.to_html(classes='table table-striped', index=False)  # Convert DataFrame to HTML
        tables.append({
            'filename': file,
            'table': table_html
        })
    return render_template("dashboard_failures_omop.html", tables=tables, standard=session.get("standard"))

# graphs generation
def fire(url, file_name, fhir_extra):
    """
    Run FHIR loading data and quality checks.

    Args:
        url: Url of FHIR server.
        file_name: Name of file with input data.
        fhir_extra: Switch for extra FHIR data quality checks.

    Returns:
        List of generated graphs in json format.
    """
    # server
    smart_client = provide_server_connection(url)

    # store resources
    read_xml_and_create_resources(file_name, smart_client)

    # create graphs
    pdf = quality_checks_fhir.create_patient_data_frame(smart_client.server)
    sdf = quality_checks_fhir.create_specimen_data_frame(smart_client.server)
    cdf = quality_checks_fhir.create_condition_data_frame(smart_client.server)

    graphs = []

    p_completeness = quality_checks_fhir.completeness(pdf).to_json()
    graphs.append(p_completeness)
    s_completeness = quality_checks_fhir.completeness(sdf).to_json()
    graphs.append(s_completeness)
    c_completeness = quality_checks_fhir.completeness(cdf).to_json()
    graphs.append(c_completeness)

    p_uniqueness = quality_checks_fhir.uniqueness(pdf, "patient").to_json()
    graphs.append(p_uniqueness)
    s_uniqueness = quality_checks_fhir.uniqueness(pdf, "specimen").to_json()
    graphs.append(s_uniqueness)
    c_uniqueness = quality_checks_fhir.uniqueness(pdf, "condition").to_json()
    graphs.append(c_uniqueness)

    p_conformance = quality_checks_fhir.conformance_patient(pdf).to_json()
    graphs.append(p_conformance)
    c_conformance = quality_checks_fhir.conformance_condition(cdf).to_json()
    graphs.append(c_conformance)
    s_conformance = quality_checks_fhir.conformance_specimen(sdf).to_json()
    graphs.append(s_conformance)

    s_conformance_r = quality_checks_fhir.conformance_relational(sdf, smart_client.server).to_json()
    graphs.append(s_conformance_r)
    c_conformance_r = quality_checks_fhir.conformance_relational(cdf, smart_client.server).to_json()
    graphs.append(c_conformance_r)
    conformance_c = quality_checks_fhir.conformance_computational(pdf, sdf, cdf).to_json()
    graphs.append(conformance_c)

    age_at_primary_diagnosis = quality_checks_fhir.age_at_primary_diagnosis(pdf, cdf).to_json()
    graphs.append(age_at_primary_diagnosis)
    diagnosis_in_future = quality_checks_fhir.diagnosis_in_future(cdf).to_json()
    graphs.append(diagnosis_in_future)
    missing_collection_collectedDateTime = quality_checks_fhir.missing_collection_collectedDateTime(pdf, sdf).to_json()
    graphs.append(missing_collection_collectedDateTime)
    # TODO problem here
    # patients_without_specimen_type_text = quality_checks_fhir.patients_without_specimen_type_text(pdf, cdf).to_json()
    # graphs.append(patients_without_specimen_type_text)
    patients_without_condition_values = quality_checks_fhir.patients_without_condition_values(pdf, cdf).to_json()
    graphs.append(patients_without_condition_values)

    if fhir_extra:
        os.makedirs('graphs/fhir/extra', exist_ok=True)
        other_graphs = create_graphs(file_name, smart_client)
        for i, graph_json in enumerate(other_graphs):
            with open(f'graphs/fhir/extra/graph_{i}.json', 'w') as f:
                json.dump(graph_json, f)

    # TODO chatGPT
    # Directory to store the JSON files
    os.makedirs('graphs/fhir', exist_ok=True)

    # Save each graph as a separate JSON file
    for j, graph_json in enumerate(graphs):
        with open(f'graphs/fhir/graph_{j}.json', 'w') as f:
            json.dump(graph_json, f)

    # create report
    # create_report_fhir(smart_client.server)
    return graphs


def omop_workflow(ohdsi, input_file):
    """
    Run OMOP loading data and quality checks.

    Args:
        ohdsi: Connection information for OMOP database.
        input_file: Name of file with input data.

    Returns:
        List of generated graphs in json format.
    """
    schema = ohdsi.pop("schema")
    load_data(ohdsi, input_file, schema)

    # dashboard viz
    con = psycopg2.connect(**ohdsi)
    graphs = []

    pdf = qc_o.create_df_omop(con, "person", schema)
    odf = qc_o.create_df_omop(con, "observation_period", schema)
    cdf = qc_o.create_df_omop(con, "condition_occurrence", schema)
    sdf = qc_o.create_df_omop(con, "specimen", schema)
    ddf = qc_o.create_df_omop(con, "drug_exposure", schema)
    prdf = qc_o.create_df_omop(con, "procedure_occurrence", schema)

    graphs.append(qc_o.completeness(pdf).to_json())
    graphs.append(qc_o.completeness(odf).to_json())
    graphs.append(qc_o.completeness(cdf).to_json())
    graphs.append(qc_o.completeness(sdf).to_json())
    graphs.append(qc_o.completeness(ddf).to_json())
    graphs.append(qc_o.completeness(prdf).to_json())

    graphs.append(qc_o.uniqueness(pdf).to_json())
    graphs.append(qc_o.uniqueness(pdf).to_json())
    graphs.append(qc_o.uniqueness(pdf).to_json())
    graphs.append(qc_o.uniqueness(pdf).to_json())
    graphs.append(qc_o.uniqueness(pdf).to_json())
    graphs.append(qc_o.uniqueness(pdf).to_json())

    # warnings
    graphs.append(qc_o.observation_end_precedes_condition_start(cdf, odf).to_json())
    graphs.append(qc_o.observation_end_equals_condition_start(cdf, odf).to_json())
    graphs.append(qc_o.too_young_person(pdf,cdf).to_json())
    graphs.append(qc_o.observation_end_in_the_future(odf).to_json())
    graphs.append(qc_o.condition_start_in_the_future(cdf).to_json())
    graphs.append(qc_o.missing_drug_exposure_info(ddf).to_json())
    graphs.append(qc_o.sus_pharma(ddf).to_json())
    graphs.append(qc_o.sus_pharma_other(ddf).to_json())
    graphs.append(qc_o.drug_end_before_start(ddf).to_json())
    # TODO solve problem, function returns tuple
    # graphs.append(qc_o.therapy_start_before_diagnosis(cdf, ddf, prdf).to_json())
    # graphs.append(qc_o.treatment_start_in_the_future(ddf, prdf).to_json())
    graphs.append(qc_o.drug_exposure_end_in_the_future(ddf).to_json())
    graphs.append(qc_o.sus_early_pharma(cdf, ddf).to_json())
    graphs.append(qc_o.sus_short_pharma(cdf, ddf).to_json())

    # reports
    graphs.append(qc_o.missing_specimen_date(pdf, sdf).to_json())
    graphs.append(qc_o.patients_without_specimen_source_id(pdf, sdf).to_json())
    graphs.append(qc_o.patients_without_specimen_source_value_concept_id(pdf, sdf).to_json())
    graphs.append(qc_o.patients_without_condition_values(pdf, cdf).to_json())
    graphs.append(qc_o.patients_without_surgery_values(pdf, prdf).to_json())
    graphs.append(qc_o.missing_patient_and_diagnostic_values(pdf, prdf).to_json())
    graphs.append(qc_o.missing_targeted_therapy_values(pdf, prdf).to_json())
    graphs.append(qc_o.missing_pharmacotherapy_value(pdf, ddf).to_json())
    graphs.append(qc_o.missing_radiation_therapy_values(pdf, prdf).to_json())
    graphs.append(qc_o.counts_of_records(pdf, odf, cdf, sdf, ddf, prdf).to_json())
    graphs.append(qc_o.get_patients_without_surgery(pdf, prdf).to_json())

    # TODO chatGPT
    # Directory to store the JSON files
    os.makedirs('graphs/omop', exist_ok=True)

    # Save each graph as a separate JSON file
    for i, graph_json in enumerate(graphs):
        with open(f'graphs/omop/graph_{i}.json', 'w') as f:
            json.dump(graph_json, f)

    # create report
    # con = psycopg2.connect(**ohdsi)
    # create_report_ohdsi(con, schema)
    return graphs

# TODO ChatGPT generated and customized
def delete_files_except_one(directory):
    """
    Delete generated files with data.

    Args:
        directory: Directory with generated files.

    Returns:
        None
    """
    # Ensure the directory exists
    if not os.path.exists(directory):
        print(f"The directory {directory} does not exist.")
        return

    # Iterate through the directory
    for item in os.listdir(directory):
        item_path = os.path.join(directory, item)

        # Skip the file that needs to be kept
        if item == "empty":
            continue

        # If it's a file, delete it
        elif os.path.isfile(item_path):
            os.remove(item_path)
            print(f"Deleted file: {item_path}")

def teardown():
    """

    Returns: Clean repository after closing app.

    """
    delete_files_except_one("reports/fhir")
    delete_files_except_one("reports/fhir/extra")
    delete_files_except_one("reports/omop")
    delete_files_except_one("graphs/fhir")
    delete_files_except_one("graphs/fhir/extra")
    delete_files_except_one("graphs/omop")
    delete_files_except_one("uploads")
    try:
        os.remove("patients_ids.txt")
        os.remove("conditions_ids.txt")
        os.remove("specimens_ids.txt")
        os.remove("radiation_ids.txt")
        os.remove("surgery_ids.txt")
        os.remove("targeteds_ids.txt")
        os.remove("response_ids.txt")
        os.remove("time_observation_ids.txt")
        os.remove("tnm_ids.txt")
    except Exception as e:
        print(f"Error: {e}")
        return "An error occurred", 500

atexit.register(teardown)

# checking functions
def check_fhir_connection(url):
    """
    Try connection to FHIR server.

    Args:
        url: FHIR server url.

    Returns:
        Result of try.
    """
    settings = {
        'app_id': 'my_web_app',
        'api_base': url
    }
    smart = client.FHIRClient(settings=settings)
    if smart.ready:
        return False
    smart.prepare()
    if not smart.ready:
        return False
    if smart.authorize_url is not None:
        return False
    return True

def check_database_connection(params):
    """
    Try connection to OMOP database.

    Args:
        params: OMOP database connection parameters.

    Returns:
        Result of try.

    """
    try:
        # open connection
        conn = psycopg2.connect(**params)
        cursor = conn.cursor()

        # close connection
        cursor.close()
        conn.close()
    except Exception as e:
        return e


def create_zip_graphs(files_path, count):
    """
    Create zip buffer

    Args:
        files_path: Path to files for zip
        count: Count of files

    Returns:
        Zip buffer
    """
    # Create an in-memory ZIP file
    zip_buffer = io.BytesIO()

    # List of files to add to the ZIP
    files_to_zip = ["graph_" + str(x) + ".json" for x in range(count)]

    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for file_name in files_to_zip:
            file_path = os.path.join(files_path, file_name)
            if os.path.exists(file_path):
                zip_file.write(file_path, arcname=file_name)
            else:
                print(f"File {file_name} does not exist.")  # Optional logging

    zip_buffer.seek(0)  # Rewind the buffer to the beginning
    return zip_buffer

@app.route('/download_graphs_fhir_zip')
def download_graphs_fhir_zip():
    """

    Returns: Send zip file of FHIR graphs to download.

    """
    files_path = os.path.join(os.getcwd(), "graphs/fhir")
    # Generate the ZIP file containing existing files
    zip_buffer = create_zip_graphs(files_path, 16)

    # Send the ZIP file as a downloadable response
    return send_file(zip_buffer, as_attachment=True, download_name="graphs_fhir.zip", mimetype='application/zip')


@app.route('/download_graphs_fhir_zip_extra')
def download_graphs_fhir_zip_extra():
    """

    Returns: Send zip file of FHIR extra graphs to download.

    """
    files_path = os.path.join(os.getcwd(), "graphs/fhir/extra")
    # Generate the ZIP file containing existing files
    zip_buffer = create_zip_graphs(files_path, 33)

    # Send the ZIP file as a downloadable response
    return send_file(zip_buffer, as_attachment=True, download_name="graphs_fhir_extra.zip", mimetype='application/zip')

@app.route('/download_graphs_omop_zip')
def download_graphs_omop_zip():
    """

    Returns: Send zip file of omop graphs to download.

    """
    files_path = os.path.join(os.getcwd(), "graphs/omop")
    # Generate the ZIP file containing existing files
    zip_buffer = create_zip_graphs(files_path, 35)

    # Send the ZIP file as a downloadable response
    return send_file(zip_buffer, as_attachment=True, download_name="graphs_omop.zip", mimetype='application/zip')

def create_zip_failures(files_path):
    """
    Create zip buffer

    Args:
        files_path: Path to files for zip

    Returns:
        Zip buffer
    """
    zip_buffer = io.BytesIO()
    files_to_zip = []

    # Ensure the directory exists?
    if not os.path.exists(files_path):
        print(f"The directory {files_path} does not exist.")
        return

    for item in os.listdir(files_path):
        item_path = os.path.join(files_path, item)
        print(item_path)
        if item == "empty":
            continue
        elif os.path.isfile(item_path):
            files_to_zip.append(item)

    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for file_name in files_to_zip:
            print(file_name)
            file_path = os.path.join(files_path, file_name)
            if os.path.exists(file_path):
                zip_file.write(file_path, arcname=file_name)
            else:
                print(f"File {file_name} does not exist.")  # Optional logging

    zip_buffer.seek(0)  # Rewind the buffer to the beginning
    return zip_buffer

@app.route('/download_failures_fhir_zip')
def download_failures_fhir_zip():
    """

    Returns: Send zip file of FHIR failures to download.

    """
    files_path = os.path.join(os.getcwd(), "reports/fhir")
    # Generate the ZIP file containing existing files
    zip_buffer = create_zip_failures(files_path)

    # Send the ZIP file as a downloadable response
    return send_file(zip_buffer, as_attachment=True, download_name="failures_fhir.zip", mimetype='application/zip')

@app.route('/download_failures_fhir_zip_extra')
def download_failures_fhir_zip_extra():
    """

    Returns: Send zip file of FHIR extra failures to download.

    """
    files_path = os.path.join(os.getcwd(), "reports/fhir/extra")
    # Generate the ZIP file containing existing files
    zip_buffer = create_zip_failures(files_path)

    # Send the ZIP file as a downloadable response
    return send_file(zip_buffer, as_attachment=True, download_name="failures_fhir_extra.zip", mimetype='application/zip')


@app.route('/download_failures_omop_zip')
def download_failures_omop_zip():
    """

    Returns: Send zip file of OMOP failures to download.

    """
    files_path = os.path.join(os.getcwd(), "reports/omop")
    # Generate the ZIP file containing existing files
    zip_buffer = create_zip_failures(files_path)

    # Send the ZIP file as a downloadable response
    return send_file(zip_buffer, as_attachment=True, download_name="failures_omop.zip", mimetype='application/zip')

@app.route('/check_graphs_done_fhir_extra')
def check_graphs_done_fhir_extra():
    """

    Returns: End point for loading FHIR extra graphs.

    """
    graphs = []

    # Load all JSON files from the directory
    for file_name in os.listdir('graphs/fhir/extra'):
        if file_name.endswith('.json'):
            with open(os.path.join('graphs/fhir/extra', file_name)) as f:
                graphs.append(json.load(f))

    if len(graphs) != 33:
        graphs_done = False
    else:
        graphs_done = True

    data = {
        "response" : graphs_done,
        "graphs" : graphs
    }
    json_data = json.dumps(data)
    return json_data

@app.route('/check_failures_done_fhir_extra')
def check_failures_done_fhir_extra():
    """

    Returns: End point for loading FHIR extra failures.

    """
    data_path = './reports/fhir/extra'  # Directory containing CSV files
    csv_files = [f for f in os.listdir(data_path) if f.endswith('.csv')]

    tables = []
    for file in csv_files:
        file_path = os.path.join(data_path, file)
        df = pd.read_csv(file_path)  # Read CSV file
        table_html = df.to_html(classes='table table-striped', index=False)  # Convert DataFrame to HTML
        tables.append(table_html)

    print(len(tables))
    if len(tables) != 36:
        graphs_done = False
    else:
        graphs_done = True

    data = {
        "response" : graphs_done,
        "tables" : tables
    }
    json_data = json.dumps(data)
    return json_data


@app.route('/check_graphs_done_fhir')
def check_graphs_done_fhir():
    """

    Returns: End point for loading FHIR graphs.

    """
    graphs = []

    # Load all JSON files from the directory
    for file_name in os.listdir('graphs/fhir'):
        if file_name.endswith('.json'):
            with open(os.path.join('graphs/fhir', file_name)) as f:
                graphs.append(json.load(f))

    if len(graphs) != 16:
        graphs_done = False
    else:
        graphs_done = True

    data = {
        "response" : graphs_done,
        "graphs" : graphs
    }
    json_data = json.dumps(data)
    return json_data


@app.route('/check_failures_done_fhir')
def check_failures_done_fhir():
    """

    Returns: End point for loading FHIR failures.

    """
    data_path = './reports/fhir'  # Directory containing CSV files
    csv_files = [f for f in os.listdir(data_path) if f.endswith('.csv')]

    tables = []
    for file in csv_files:
        file_path = os.path.join(data_path, file)
        df = pd.read_csv(file_path)  # Read CSV file
        table_html = df.to_html(classes='table table-striped', index=False)  # Convert DataFrame to HTML
        tables.append(table_html)

    print(len(tables))
    if len(tables) != 15:
        graphs_done = False
    else:
        graphs_done = True

    data = {
        "response" : graphs_done,
        "tables" : tables
    }
    json_data = json.dumps(data)
    return json_data


@app.route('/check_graphs_done_omop', methods=['GET', "POST"])
def check_graphs_done_omop():
    """

    Returns: End point for loading OMOP graphs.

    """
    graphs = []

    # Load all JSON files from the directory
    for file_name in os.listdir('graphs/omop'):
        if file_name.endswith('.json'):
            with open(os.path.join('graphs/omop', file_name)) as f:
                graphs.append(json.load(f))

    if len(graphs) != 35:
        graphs_done = False
    else:
        graphs_done = True

    data = {
        "response" : graphs_done,
        "graphs" : graphs
    }
    json_data = json.dumps(data)
    return json_data


# Route to serve the PDF file
@app.route('/download/<filename>')
def download_file(filename):
    return send_from_directory('static', filename, as_attachment=True)


@app.route('/qc_documentation', methods=['GET', 'POST'])
def qc_documentation():
    """

    Returns: Load documentation of quality checks from json file.

    """
    with open('./static/documentation.json', 'r') as file:
        data = json.load(file)
    return render_template('qc_documentation.html',content_data=data)


if __name__ == "__main__":
    try:
        app.run(debug=True)
    finally:
        # Optional: Additional cleanup code after app.run() exits (can be useful)
        print("App.run() has finished executing.")
